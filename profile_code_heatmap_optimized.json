{
  "h": {
    "objectName": "DFABuilderEnumerating.py",
    "runTime": 4.771673202514648,
    "heatmaps": [
      {
        "name": "D:\\Studium\\Module\\Semester 6\\Bachelor-Arbeit\\Generation-of-DFA-Minimization-Problems\\DFABuilderEnumerating.py",
        "heatmap": {
          "1": 0.0,
          "2": 0.0,
          "4": 0.0,
          "6": 0.0,
          "7": 0.0,
          "10": 0.0,
          "11": 0.0,
          "18": 0.0,
          "24": 0.0,
          "37": 0.0,
          "109": 0.0,
          "111": 0.0,
          "39": 0.0,
          "41": 0.0,
          "42": 0.0,
          "54": 0.0,
          "56": 0.0,
          "59": 0.0,
          "60": 0.0,
          "62": 0.0,
          "65": 0.020033836364746094,
          "72": 0.01551198959350586,
          "77": 0.017014741897583008,
          "78": 0.016018152236938477,
          "81": 0.027032852172851562,
          "85": 0.034032583236694336,
          "87": 0.026031494140625,
          "88": 0.014032602310180664,
          "90": 0.0,
          "92": 0.0,
          "95": 0.0,
          "97": 0.0,
          "20": 0.0,
          "79": 0.0,
          "66": 0.0,
          "67": 0.0,
          "68": 0.0,
          "69": 0.0009989738464355469
        },
        "executionCount": {
          "1": 1,
          "2": 1,
          "4": 1,
          "6": 1,
          "7": 1,
          "10": 1,
          "11": 1,
          "18": 1,
          "24": 1,
          "37": 1,
          "109": 1,
          "111": 1,
          "39": 1,
          "41": 1,
          "42": 1,
          "54": 1,
          "56": 1,
          "59": 1,
          "60": 1,
          "62": 1,
          "65": 10001,
          "72": 10000,
          "77": 10000,
          "78": 10000,
          "81": 10000,
          "85": 10000,
          "87": 10000,
          "88": 9982,
          "90": 18,
          "92": 18,
          "95": 18,
          "97": 18,
          "20": 18,
          "79": 1,
          "66": 1,
          "67": 1,
          "68": 1,
          "69": 1
        },
        "srcCode": [
          [
            "line",
            1,
            "from DFA \t      import DFA"
          ],
          [
            "line",
            2,
            "from minimize_dfa import *"
          ],
          [
            "line",
            3,
            ""
          ],
          [
            "line",
            4,
            "from isomorphy_test_min_dfas import isomorphy_test_min_dfas"
          ],
          [
            "line",
            5,
            ""
          ],
          [
            "line",
            6,
            "import DB_MinimalDFAs         as db1"
          ],
          [
            "line",
            7,
            "import DB_EnumerationProgress as db2"
          ],
          [
            "line",
            8,
            ""
          ],
          [
            "line",
            9,
            ""
          ],
          [
            "line",
            10,
            "import threading"
          ],
          [
            "line",
            11,
            "import sqlite3"
          ],
          [
            "line",
            12,
            ""
          ],
          [
            "line",
            13,
            ""
          ],
          [
            "line",
            14,
            "#DB_MUTEX = threading.Lock()"
          ],
          [
            "line",
            15,
            ""
          ],
          [
            "line",
            16,
            "    "
          ],
          [
            "line",
            17,
            "    "
          ],
          [
            "line",
            18,
            "def propertiesMatch(properties, numberOfStates, minDepth, maxDepth, alphabetSize, numberOfAcceptingStates):"
          ],
          [
            "line",
            19,
            ""
          ],
          [
            "line",
            20,
            "    return properties[0] == numberOfStates and minDepth <= properties[1] <= maxDepth and properties[2] == numberOfAcceptingStates and properties[3] == alphabetSize"
          ],
          [
            "line",
            21,
            "        "
          ],
          [
            "line",
            22,
            "        "
          ],
          [
            "line",
            23,
            "        "
          ],
          [
            "line",
            24,
            "def hasIsomorphMatchingDFA(testDFA, l):"
          ],
          [
            "skip",
            12
          ],
          [
            "line",
            37,
            "def build_next_fitting_dfa(numberOfStates, minDepth, maxDepth, alphabetSize, numberOfAcceptingStates):"
          ],
          [
            "line",
            38,
            ""
          ],
          [
            "line",
            39,
            "    conn = sqlite3.connect('dfa.db')"
          ],
          [
            "line",
            40,
            "    "
          ],
          [
            "line",
            41,
            "    db1.ensureValidity(conn)"
          ],
          [
            "line",
            42,
            "    db2.ensureValidity(conn)"
          ],
          [
            "skip",
            11
          ],
          [
            "line",
            54,
            "    enumProgress = db2.fetchEnumerationProgress(conn, numberOfStates, alphabetSize, numberOfAcceptingStates)"
          ],
          [
            "line",
            55,
            "    "
          ],
          [
            "line",
            56,
            "    matchingUsedDFAs = db1.fetchMatchingDFAs(conn, numberOfStates, minDepth, maxDepth, alphabetSize, numberOfAcceptingStates)"
          ],
          [
            "line",
            57,
            "    "
          ],
          [
            "line",
            58,
            "    # DEBUG"
          ],
          [
            "line",
            59,
            "    iEnd = 10000"
          ],
          [
            "line",
            60,
            "    i = 0"
          ],
          [
            "line",
            61,
            "    "
          ],
          [
            "line",
            62,
            "    while True:"
          ],
          [
            "line",
            63,
            "    "
          ],
          [
            "line",
            64,
            "        # DEBUG"
          ],
          [
            "line",
            65,
            "        if i == iEnd:"
          ],
          [
            "line",
            66,
            "            db2.updateEnumerationProgress(conn, enumProgress)"
          ],
          [
            "line",
            67,
            "            print(i, enumProgress)"
          ],
          [
            "line",
            68,
            "            conn.close()"
          ],
          [
            "line",
            69,
            "            return None"
          ],
          [
            "line",
            70,
            "            "
          ],
          [
            "line",
            71,
            "    "
          ],
          [
            "line",
            72,
            "        if enumProgress.finished:"
          ],
          [
            "line",
            73,
            "            db2.updateEnumerationProgress(conn, enumProgress)"
          ],
          [
            "line",
            74,
            "            conn.close()"
          ],
          [
            "line",
            75,
            "            return None"
          ],
          [
            "line",
            76,
            "        "
          ],
          [
            "line",
            77,
            "        i += 1"
          ],
          [
            "line",
            78,
            "        if not i % 10000:"
          ],
          [
            "line",
            79,
            "            print(i/iEnd)"
          ],
          [
            "line",
            80,
            "            "
          ],
          [
            "line",
            81,
            "        enumProgress.increment()"
          ],
          [
            "line",
            82,
            "        "
          ],
          [
            "line",
            83,
            "        # ---"
          ],
          [
            "line",
            84,
            "        "
          ],
          [
            "line",
            85,
            "        reachDFA = delete_unreachable_states(enumProgress.dfa())"
          ],
          [
            "line",
            86,
            "        "
          ],
          [
            "line",
            87,
            "        if len(reachDFA.states) < numberOfStates:"
          ],
          [
            "line",
            88,
            "            continue"
          ],
          [
            "line",
            89,
            "        "
          ],
          [
            "line",
            90,
            "        minDFA, min_mark_depth = delete_duplicate_states(reachDFA)"
          ],
          [
            "line",
            91,
            "        "
          ],
          [
            "line",
            92,
            "        minDFA = delete_useless_symbols(minDFA)"
          ],
          [
            "line",
            93,
            "        "
          ],
          [
            "line",
            94,
            "        "
          ],
          [
            "line",
            95,
            "        minDFAproperties = (len(minDFA.states), min_mark_depth, len(minDFA.accepting), len(minDFA.alphabet))"
          ],
          [
            "line",
            96,
            "        "
          ],
          [
            "line",
            97,
            "        if propertiesMatch(minDFAproperties, numberOfStates, minDepth, maxDepth, alphabetSize, numberOfAcceptingStates):"
          ],
          [
            "skip",
            11
          ],
          [
            "line",
            109,
            "if __name__ == \"__main__\":"
          ],
          [
            "line",
            110,
            ""
          ],
          [
            "line",
            111,
            "    print(build_next_fitting_dfa(7, 2, 3, 3, 2))"
          ],
          [
            "line",
            112,
            ""
          ]
        ],
        "runTime": 0.17070722579956055
      },
      {
        "name": "D:\\Studium\\Module\\Semester 6\\Bachelor-Arbeit\\Generation-of-DFA-Minimization-Problems\\DFA.py",
        "heatmap": {
          "1": 0.0,
          "3": 0.0,
          "14": 0.0,
          "32": 0.0,
          "50": 0.0,
          "68": 0.0,
          "88": 0.0,
          "96": 0.0,
          "5": 0.00600433349609375,
          "7": 0.011995077133178711,
          "8": 0.008004188537597656,
          "9": 0.010014533996582031,
          "10": 0.003000497817993164,
          "11": 0.05857968330383301
        },
        "executionCount": {
          "1": 2,
          "3": 1,
          "14": 1,
          "32": 1,
          "50": 1,
          "68": 1,
          "88": 1,
          "96": 1,
          "5": 10000,
          "7": 10000,
          "8": 10000,
          "9": 10000,
          "10": 10000,
          "11": 10000
        },
        "srcCode": [
          [
            "line",
            1,
            "class DFA(object):"
          ],
          [
            "line",
            2,
            "\t"
          ],
          [
            "line",
            3,
            "    def __init__(self, alphabet=['a','b','c'], states=[], transition_function=[], start_state=None, accepting_states=[]):"
          ],
          [
            "line",
            4,
            ""
          ],
          [
            "line",
            5,
            "        self.__state_counter = 0"
          ],
          [
            "line",
            6,
            ""
          ],
          [
            "line",
            7,
            "        self.alphabet    = alphabet"
          ],
          [
            "line",
            8,
            "        self.states      = states"
          ],
          [
            "line",
            9,
            "        self.transitions = transition_function"
          ],
          [
            "line",
            10,
            "        self.start       = start_state"
          ],
          [
            "line",
            11,
            "        self.accepting   = accepting_states"
          ],
          [
            "line",
            12,
            "        "
          ],
          [
            "line",
            13,
            "        "
          ],
          [
            "line",
            14,
            "    def __str__(self):"
          ],
          [
            "skip",
            17
          ],
          [
            "line",
            32,
            "    def add_state(self, start=False, accepting=False):"
          ],
          [
            "skip",
            17
          ],
          [
            "line",
            50,
            "    def add_transition(self, state1, symbol, state2):"
          ],
          [
            "skip",
            17
          ],
          [
            "line",
            68,
            "    def remove_state(self, state_to_remove):"
          ],
          [
            "skip",
            19
          ],
          [
            "line",
            88,
            "    def remove_transition(self, transition_to_remove):"
          ],
          [
            "line",
            89,
            ""
          ],
          [
            "line",
            90,
            "        if transition_to_remove not in self.transitions:"
          ],
          [
            "line",
            91,
            "            raise ValueError(\"Transition to remove does not exist.\")"
          ],
          [
            "line",
            92,
            ""
          ],
          [
            "line",
            93,
            "        self.transitions.remove(transition_to_remove)"
          ],
          [
            "line",
            94,
            ""
          ],
          [
            "line",
            95,
            ""
          ],
          [
            "line",
            96,
            "    def __next_state(self):"
          ],
          [
            "line",
            97,
            ""
          ],
          [
            "line",
            98,
            "        while self.__state_counter in self.states or str(self.__state_counter) in self.states:"
          ],
          [
            "line",
            99,
            "            self.__state_counter += 1"
          ],
          [
            "line",
            100,
            ""
          ],
          [
            "line",
            101,
            "        return self.__state_counter"
          ],
          [
            "line",
            102,
            ""
          ]
        ],
        "runTime": 0.09759831428527832
      },
      {
        "name": "D:\\Studium\\Module\\Semester 6\\Bachelor-Arbeit\\Generation-of-DFA-Minimization-Problems\\minimize_dfa.py",
        "heatmap": {
          "1": 0.0,
          "4": 0.0,
          "11": 0.0,
          "28": 0.0,
          "72": 0.0,
          "155": 0.0,
          "198": 0.0,
          "32": 0.024019241333007812,
          "33": 0.03102707862854004,
          "35": 0.016006946563720703,
          "37": 0.015006780624389648,
          "39": 0.042063236236572266,
          "41": 0.06505846977233887,
          "43": 0.040891408920288086,
          "45": 0.10308408737182617,
          "46": 0.23646116256713867,
          "47": 0.20558404922485352,
          "49": 0.19270086288452148,
          "50": 0.21848082542419434,
          "51": 0.048132896423339844,
          "53": 0.05595278739929199,
          "54": 0.04706835746765137,
          "55": 0.0340428352355957,
          "59": 0.05205941200256348,
          "60": 0.0590970516204834,
          "62": 0.04903078079223633,
          "65": 0.8500499725341797,
          "66": 0.15316987037658691,
          "67": 0.1957259178161621,
          "69": 0.04110217094421387,
          "76": 0.0,
          "78": 0.0,
          "79": 0.0,
          "80": 0.0010013580322265625,
          "81": 0.0,
          "82": 0.0,
          "84": 0.0,
          "86": 0.0,
          "88": 0.0,
          "90": 0.0,
          "92": 0.0,
          "93": 0.006994724273681641,
          "94": 0.004001140594482422,
          "95": 0.009001016616821289,
          "97": 0.005011081695556641,
          "98": 0.0040013790130615234,
          "99": 0.001001596450805664,
          "100": 0.0,
          "102": 0.0,
          "104": 0.0,
          "107": 0.0,
          "105": 0.0,
          "110": 0.0010006427764892578,
          "112": 0.0,
          "115": 0.0,
          "118": 0.0010008811950683594,
          "121": 0.0,
          "123": 0.0,
          "126": 0.0,
          "129": 0.0010101795196533203,
          "130": 0.0010008811950683594,
          "132": 0.001995086669921875,
          "134": 0.00301361083984375,
          "137": 0.000993490219116211,
          "135": 0.0,
          "133": 0.0009992122650146484,
          "139": 0.0030126571655273438,
          "140": 0.0,
          "141": 0.0,
          "143": 0.000993967056274414,
          "145": 0.002995014190673828,
          "144": 0.0,
          "142": 0.0,
          "119": 0.0,
          "147": 0.0,
          "149": 0.0,
          "13": 0.0,
          "15": 0.0,
          "17": 0.0,
          "18": 0.0009980201721191406,
          "19": 0.0,
          "20": 0.0,
          "22": 0.0,
          "25": 0.0
        },
        "executionCount": {
          "1": 1,
          "4": 1,
          "11": 1,
          "28": 1,
          "72": 1,
          "155": 1,
          "198": 1,
          "32": 10000,
          "33": 10000,
          "35": 10000,
          "37": 10000,
          "39": 10000,
          "41": 36380,
          "43": 26380,
          "45": 65607,
          "46": 156908,
          "47": 117681,
          "49": 117681,
          "50": 117681,
          "51": 33014,
          "53": 26380,
          "54": 26380,
          "55": 26380,
          "59": 40773,
          "60": 30773,
          "62": 30773,
          "65": 591268,
          "66": 123092,
          "67": 92319,
          "69": 10000,
          "76": 18,
          "78": 36,
          "79": 144,
          "80": 126,
          "81": 108,
          "82": 108,
          "84": 18,
          "86": 18,
          "88": 18,
          "90": 36,
          "92": 288,
          "93": 2016,
          "94": 1764,
          "95": 3096,
          "97": 2412,
          "98": 2412,
          "99": 324,
          "100": 324,
          "102": 36,
          "104": 36,
          "107": 18,
          "105": 18,
          "110": 1044,
          "112": 234,
          "115": 216,
          "118": 216,
          "121": 54,
          "123": 54,
          "126": 54,
          "129": 1188,
          "130": 1134,
          "132": 1134,
          "134": 1134,
          "137": 1134,
          "135": 54,
          "133": 162,
          "139": 594,
          "140": 540,
          "141": 540,
          "143": 540,
          "145": 540,
          "144": 108,
          "142": 162,
          "119": 162,
          "147": 18,
          "149": 18,
          "13": 72,
          "15": 54,
          "17": 108,
          "18": 108,
          "19": 54,
          "20": 54,
          "22": 54,
          "25": 18
        },
        "srcCode": [
          [
            "line",
            1,
            "from DFA import DFA"
          ],
          [
            "line",
            2,
            ""
          ],
          [
            "line",
            3,
            ""
          ],
          [
            "line",
            4,
            "def minimize_dfa(dfa):"
          ],
          [
            "line",
            5,
            "    "
          ],
          [
            "line",
            6,
            "    dfa, min_mark_depth = delete_duplicate_states(delete_unreachable_states(dfa))"
          ],
          [
            "line",
            7,
            "    "
          ],
          [
            "line",
            8,
            "    return delete_useless_symbols(dfa)"
          ],
          [
            "line",
            9,
            "    "
          ],
          [
            "line",
            10,
            "    "
          ],
          [
            "line",
            11,
            "def delete_useless_symbols(dfa):"
          ],
          [
            "line",
            12,
            ""
          ],
          [
            "line",
            13,
            "    for c in dfa.alphabet:"
          ],
          [
            "line",
            14,
            "    "
          ],
          [
            "line",
            15,
            "        found = False"
          ],
          [
            "line",
            16,
            "        "
          ],
          [
            "line",
            17,
            "        for ((q1,s),q2) in dfa.transitions:"
          ],
          [
            "line",
            18,
            "            if s == c:"
          ],
          [
            "line",
            19,
            "                found = True"
          ],
          [
            "line",
            20,
            "                break"
          ],
          [
            "line",
            21,
            "                "
          ],
          [
            "line",
            22,
            "        if not found:"
          ],
          [
            "line",
            23,
            "            dfa.alphabet.remove(c)"
          ],
          [
            "line",
            24,
            "            "
          ],
          [
            "line",
            25,
            "    return dfa"
          ],
          [
            "line",
            26,
            ""
          ],
          [
            "line",
            27,
            ""
          ],
          [
            "line",
            28,
            "def delete_unreachable_states(dfa):"
          ],
          [
            "line",
            29,
            "                "
          ],
          [
            "line",
            30,
            "    # find unreachable states via breadth-first search"
          ],
          [
            "line",
            31,
            "    "
          ],
          [
            "line",
            32,
            "    undiscovered = set(dfa.states)"
          ],
          [
            "line",
            33,
            "    undiscovered.remove(dfa.start)"
          ],
          [
            "line",
            34,
            "    "
          ],
          [
            "line",
            35,
            "    observed = set([dfa.start])"
          ],
          [
            "line",
            36,
            "    "
          ],
          [
            "line",
            37,
            "    discovered = set()"
          ],
          [
            "line",
            38,
            "                "
          ],
          [
            "line",
            39,
            "    delta = dict(dfa.transitions)"
          ],
          [
            "line",
            40,
            "    "
          ],
          [
            "line",
            41,
            "    while len(observed) != 0:"
          ],
          [
            "line",
            42,
            "        "
          ],
          [
            "line",
            43,
            "        new_observed = set()"
          ],
          [
            "line",
            44,
            "        "
          ],
          [
            "line",
            45,
            "        for q in observed:"
          ],
          [
            "line",
            46,
            "            for sigma in dfa.alphabet:"
          ],
          [
            "line",
            47,
            "                if (q,sigma) in delta:"
          ],
          [
            "line",
            48,
            "                    "
          ],
          [
            "line",
            49,
            "                    p = delta[(q,sigma)]"
          ],
          [
            "line",
            50,
            "                    if p not in observed.union(discovered):"
          ],
          [
            "line",
            51,
            "                        new_observed.add(p)"
          ],
          [
            "line",
            52,
            ""
          ],
          [
            "line",
            53,
            "        undiscovered.difference_update(new_observed)"
          ],
          [
            "line",
            54,
            "        discovered.update(observed)"
          ],
          [
            "line",
            55,
            "        observed = new_observed"
          ],
          [
            "line",
            56,
            "        "
          ],
          [
            "line",
            57,
            "    # delete unreachable states"
          ],
          [
            "line",
            58,
            "    "
          ],
          [
            "line",
            59,
            "    for q in undiscovered:"
          ],
          [
            "line",
            60,
            "        dfa.states.remove(q)"
          ],
          [
            "line",
            61,
            "        "
          ],
          [
            "line",
            62,
            "        if q in dfa.accepting:"
          ],
          [
            "line",
            63,
            "            dfa.accepting.remove(q)"
          ],
          [
            "line",
            64,
            "            "
          ],
          [
            "line",
            65,
            "        transitions_to_remove = [((q1,s),q2) for ((q1,s),q2) in dfa.transitions if q1 == q or q2 == q]"
          ],
          [
            "line",
            66,
            "        for t in transitions_to_remove:"
          ],
          [
            "line",
            67,
            "            dfa.transitions.remove(t)"
          ],
          [
            "line",
            68,
            "        "
          ],
          [
            "line",
            69,
            "    return dfa"
          ],
          [
            "line",
            70,
            ""
          ],
          [
            "line",
            71,
            ""
          ],
          [
            "line",
            72,
            "def delete_duplicate_states(dfa):"
          ],
          [
            "line",
            73,
            "    "
          ],
          [
            "line",
            74,
            "    # find duplicate states via the minimization-mark algorithm"
          ],
          [
            "line",
            75,
            "    "
          ],
          [
            "line",
            76,
            "    M = set()"
          ],
          [
            "line",
            77,
            "    "
          ],
          [
            "line",
            78,
            "    for q in dfa.accepting:"
          ],
          [
            "line",
            79,
            "        for p in dfa.states:"
          ],
          [
            "line",
            80,
            "            if p not in dfa.accepting:"
          ],
          [
            "line",
            81,
            "                M.add((p,q))"
          ],
          [
            "line",
            82,
            "                M.add((q,p))"
          ],
          [
            "line",
            83,
            "                "
          ],
          [
            "line",
            84,
            "    delta = dict(dfa.transitions)"
          ],
          [
            "line",
            85,
            "    "
          ],
          [
            "line",
            86,
            "    min_mark_depth = 0"
          ],
          [
            "line",
            87,
            "                "
          ],
          [
            "line",
            88,
            "    while True:"
          ],
          [
            "line",
            89,
            "        "
          ],
          [
            "line",
            90,
            "        N = set()"
          ],
          [
            "line",
            91,
            "        "
          ],
          [
            "line",
            92,
            "        for q in dfa.states:"
          ],
          [
            "line",
            93,
            "            for p in dfa.states:"
          ],
          [
            "line",
            94,
            "                if (p,q) not in M:"
          ],
          [
            "line",
            95,
            "                    for sigma in dfa.alphabet:"
          ],
          [
            "line",
            96,
            "                        "
          ],
          [
            "line",
            97,
            "                        if (p,sigma) in delta and (q,sigma) in delta:"
          ],
          [
            "line",
            98,
            "                            if (delta[(p,sigma)], delta[(q,sigma)]) in M:"
          ],
          [
            "line",
            99,
            "                                N.add((p,q))"
          ],
          [
            "line",
            100,
            "                                break"
          ],
          [
            "line",
            101,
            "                            "
          ],
          [
            "line",
            102,
            "        M = M.union(N)"
          ],
          [
            "line",
            103,
            "        "
          ],
          [
            "line",
            104,
            "        if len(N) == 0:"
          ],
          [
            "line",
            105,
            "            break"
          ],
          [
            "line",
            106,
            "        else:"
          ],
          [
            "line",
            107,
            "            min_mark_depth += 1"
          ],
          [
            "line",
            108,
            "        "
          ],
          [
            "line",
            109,
            "    # merge duplicate states"
          ],
          [
            "line",
            110,
            "    duplicate_state_pairs = [(p,q) for p in dfa.states for q in dfa.states if (p,q) not in M and p != q]"
          ],
          [
            "line",
            111,
            "    "
          ],
          [
            "line",
            112,
            "    while len(duplicate_state_pairs) != 0:"
          ],
          [
            "line",
            113,
            "        "
          ],
          [
            "line",
            114,
            "        #print(duplicate_state_pairs)"
          ],
          [
            "line",
            115,
            "        (p,q) = duplicate_state_pairs.pop()"
          ],
          [
            "line",
            116,
            "        #print(duplicate_state_pairs)"
          ],
          [
            "line",
            117,
            "        "
          ],
          [
            "line",
            118,
            "        if p == q:"
          ],
          [
            "line",
            119,
            "            continue"
          ],
          [
            "line",
            120,
            "        "
          ],
          [
            "line",
            121,
            "        dfa.states.remove(q)"
          ],
          [
            "line",
            122,
            "        "
          ],
          [
            "line",
            123,
            "        if dfa.start == q:"
          ],
          [
            "line",
            124,
            "            dfa.start = p"
          ],
          [
            "line",
            125,
            "            "
          ],
          [
            "line",
            126,
            "        if q in dfa.accepting:"
          ],
          [
            "line",
            127,
            "            dfa.accepting.remove(q)"
          ],
          [
            "line",
            128,
            "            "
          ],
          [
            "line",
            129,
            "        for i in range(len(dfa.transitions)):"
          ],
          [
            "line",
            130,
            "            t = (q1,s),q2 = dfa.transitions[i]"
          ],
          [
            "line",
            131,
            "            "
          ],
          [
            "line",
            132,
            "            if q1 == q:"
          ],
          [
            "line",
            133,
            "                q1 = p"
          ],
          [
            "line",
            134,
            "            if q2 == q:"
          ],
          [
            "line",
            135,
            "                q2 = p"
          ],
          [
            "line",
            136,
            "                "
          ],
          [
            "line",
            137,
            "            dfa.transitions[i] = (q1,s),q2"
          ],
          [
            "line",
            138,
            "            "
          ],
          [
            "line",
            139,
            "        for i in range(len(duplicate_state_pairs)):"
          ],
          [
            "line",
            140,
            "            (q1,q2) = duplicate_state_pairs[i]"
          ],
          [
            "line",
            141,
            "            if q1 == q:"
          ],
          [
            "line",
            142,
            "                q1 = p"
          ],
          [
            "line",
            143,
            "            if q2 == q:"
          ],
          [
            "line",
            144,
            "                q2 = p"
          ],
          [
            "line",
            145,
            "            duplicate_state_pairs[i] = (q1,q2)"
          ],
          [
            "line",
            146,
            "            "
          ],
          [
            "line",
            147,
            "    dfa.transitions = list(set(dfa.transitions))"
          ],
          [
            "line",
            148,
            "            "
          ],
          [
            "line",
            149,
            "    return dfa, min_mark_depth"
          ],
          [
            "line",
            150,
            ""
          ],
          [
            "line",
            151,
            ""
          ],
          [
            "line",
            152,
            "# -----------------------------------------------------"
          ],
          [
            "line",
            153,
            ""
          ],
          [
            "line",
            154,
            ""
          ],
          [
            "line",
            155,
            "def minimization_mark_depth(dfa):"
          ],
          [
            "skip",
            42
          ],
          [
            "line",
            198,
            "if __name__ == \"__main__\":"
          ],
          [
            "skip",
            51
          ]
        ],
        "runTime": 2.8258421421051025
      },
      {
        "name": "D:\\Studium\\Module\\Semester 6\\Bachelor-Arbeit\\Generation-of-DFA-Minimization-Problems\\isomorphy_test_min_dfas.py",
        "heatmap": {
          "1": 0.0,
          "4": 0.0,
          "68": 0.0
        },
        "executionCount": {
          "1": 1,
          "4": 1,
          "68": 1
        },
        "srcCode": [
          [
            "line",
            1,
            "from DFA import DFA"
          ],
          [
            "line",
            2,
            ""
          ],
          [
            "line",
            3,
            ""
          ],
          [
            "line",
            4,
            "def isomorphy_test_min_dfas(dfa1, dfa2):"
          ],
          [
            "skip",
            63
          ],
          [
            "line",
            68,
            "if __name__ == \"__main__\":"
          ],
          [
            "skip",
            104
          ]
        ],
        "runTime": 0.0
      },
      {
        "name": "D:\\Studium\\Module\\Semester 6\\Bachelor-Arbeit\\Generation-of-DFA-Minimization-Problems\\DB_MinimalDFAs.py",
        "heatmap": {
          "1": 0.0,
          "2": 0.0,
          "3": 0.0,
          "5": 0.0,
          "9": 0.0,
          "19": 0.0,
          "26": 0.0,
          "50": 0.0,
          "61": 0.0,
          "69": 0.0,
          "98": 0.0,
          "134": 0.0,
          "11": 0.0,
          "13": 0.0009989738464355469,
          "15": 0.0,
          "34": 0.0,
          "36": 0.0,
          "38": 0.0,
          "40": 0.0,
          "46": 0.0
        },
        "executionCount": {
          "1": 1,
          "2": 1,
          "3": 1,
          "5": 1,
          "9": 1,
          "19": 1,
          "26": 1,
          "50": 1,
          "61": 1,
          "69": 1,
          "98": 1,
          "134": 1,
          "11": 1,
          "13": 1,
          "15": 1,
          "34": 1,
          "36": 1,
          "38": 1,
          "40": 1,
          "46": 1
        },
        "srcCode": [
          [
            "line",
            1,
            "from DFA                     import DFA"
          ],
          [
            "line",
            2,
            "from minimize_dfa            import minimization_mark_depth, minimize_dfa"
          ],
          [
            "line",
            3,
            "from isomorphy_test_min_dfas import isomorphy_test_min_dfas"
          ],
          [
            "line",
            4,
            ""
          ],
          [
            "line",
            5,
            "import sqlite3"
          ],
          [
            "line",
            6,
            ""
          ],
          [
            "line",
            7,
            ""
          ],
          [
            "line",
            8,
            ""
          ],
          [
            "line",
            9,
            "def ensureValidity(dbConn):"
          ],
          [
            "line",
            10,
            "    "
          ],
          [
            "line",
            11,
            "    dbConn.cursor().execute('''"
          ],
          [
            "line",
            12,
            "        CREATE TABLE IF NOT EXISTS MinimalDFAs "
          ],
          [
            "line",
            13,
            "        (id INTEGER PRIMARY KEY AUTOINCREMENT, dfa TEXT, numberOfStates INTEGER, minmarkDepth INTEGER, numberOfAcceptingStates INTEGER, alphabetSize INTEGER, used INTEGER)'''"
          ],
          [
            "line",
            14,
            "    )"
          ],
          [
            "line",
            15,
            "    dbConn.commit()"
          ],
          [
            "line",
            16,
            "    "
          ],
          [
            "line",
            17,
            "    "
          ],
          [
            "line",
            18,
            "    "
          ],
          [
            "line",
            19,
            "def clear(dbConn):"
          ],
          [
            "line",
            20,
            "    "
          ],
          [
            "line",
            21,
            "    dbConn.cursor().execute('''DROP TABLE IF EXISTS MinimalDFAs''')"
          ],
          [
            "line",
            22,
            "    dbConn.commit()"
          ],
          [
            "line",
            23,
            ""
          ],
          [
            "line",
            24,
            ""
          ],
          [
            "line",
            25,
            ""
          ],
          [
            "line",
            26,
            "def fetchMatchingDFAs(dbConn, numberOfStates, minDepth, maxDepth, alphabetSize, numberOfAcceptingStates):"
          ],
          [
            "line",
            27,
            "    "
          ],
          [
            "line",
            28,
            "    qFindMatchingDFA = '''SELECT * FROM MinimalDFAs WHERE "
          ],
          [
            "line",
            29,
            "        numberOfStates = ? AND"
          ],
          [
            "line",
            30,
            "        minmarkDepth >= ? AND"
          ],
          [
            "line",
            31,
            "        minmarkDepth <= ? AND"
          ],
          [
            "line",
            32,
            "        numberOfAcceptingStates = ? AND"
          ],
          [
            "line",
            33,
            "        alphabetSize = ?"
          ],
          [
            "line",
            34,
            "    '''"
          ],
          [
            "line",
            35,
            "    "
          ],
          [
            "line",
            36,
            "    results = dbConn.cursor().execute(qFindMatchingDFA, (numberOfStates, minDepth, maxDepth, numberOfAcceptingStates, alphabetSize))"
          ],
          [
            "line",
            37,
            "    "
          ],
          [
            "line",
            38,
            "    resultList = []"
          ],
          [
            "line",
            39,
            "    "
          ],
          [
            "line",
            40,
            "    for row in results:"
          ],
          [
            "line",
            41,
            "    "
          ],
          [
            "line",
            42,
            "        id, dfa, properties, used = __interpretDBRow(row)"
          ],
          [
            "line",
            43,
            "        "
          ],
          [
            "line",
            44,
            "        resultList.append(dfa)"
          ],
          [
            "line",
            45,
            "            "
          ],
          [
            "line",
            46,
            "    return resultList"
          ],
          [
            "line",
            47,
            "            "
          ],
          [
            "line",
            48,
            "    "
          ],
          [
            "line",
            49,
            ""
          ],
          [
            "line",
            50,
            "def saveNewDFA(dbConn, dfa, properties, used):"
          ],
          [
            "line",
            51,
            ""
          ],
          [
            "line",
            52,
            "    qSaveDFA = '''INSERT INTO MinimalDFAs VALUES (NULL,?,?,?,?,?,?)'''"
          ],
          [
            "line",
            53,
            "    "
          ],
          [
            "line",
            54,
            "    row = (__encodeDFA(dfa), properties[0], properties[1], properties[2], properties[3], int(used))"
          ],
          [
            "line",
            55,
            ""
          ],
          [
            "line",
            56,
            "    dbConn.cursor().execute(qSaveDFA, row)"
          ],
          [
            "line",
            57,
            "    dbConn.commit()"
          ],
          [
            "line",
            58,
            ""
          ],
          [
            "line",
            59,
            "        "
          ],
          [
            "line",
            60,
            "        "
          ],
          [
            "line",
            61,
            "def __interpretDBRow(row):"
          ],
          [
            "line",
            62,
            ""
          ],
          [
            "line",
            63,
            "    id, dfa, numberOfStates, minmarkDepth, numberOfAcceptingStates, alphabetSize, used = row"
          ],
          [
            "line",
            64,
            ""
          ],
          [
            "line",
            65,
            "    return id, __decodeDFA(dfa), (numberOfStates, minmarkDepth, numberOfAcceptingStates, alphabetSize), bool(used)"
          ],
          [
            "line",
            66,
            ""
          ],
          [
            "line",
            67,
            ""
          ],
          [
            "line",
            68,
            ""
          ],
          [
            "line",
            69,
            "def __encodeDFA(dfa):"
          ],
          [
            "skip",
            28
          ],
          [
            "line",
            98,
            "def __decodeDFA(encodedDFA):"
          ],
          [
            "skip",
            35
          ],
          [
            "line",
            134,
            "if __name__ == \"__main__\":"
          ],
          [
            "skip",
            67
          ]
        ],
        "runTime": 0.0009989738464355469
      },
      {
        "name": "D:\\Studium\\Module\\Semester 6\\Bachelor-Arbeit\\Generation-of-DFA-Minimization-Problems\\DB_EnumerationProgress.py",
        "heatmap": {
          "1": 0.0,
          "3": 0.0,
          "7": 0.0,
          "17": 0.0,
          "24": 0.0,
          "32": 0.0,
          "74": 0.0,
          "95": 0.0,
          "97": 0.0,
          "118": 0.0,
          "133": 0.0,
          "138": 0.0,
          "185": 0.0,
          "201": 0.0,
          "9": 0.0,
          "11": 0.0,
          "13": 0.0,
          "34": 0.0,
          "36": 0.0,
          "39": 0.0,
          "40": 0.0,
          "42": 0.0,
          "44": 0.0,
          "64": 0.0,
          "66": 0.0,
          "67": 0.0,
          "68": 0.0,
          "70": 0.0,
          "121": 0.0,
          "124": 0.0,
          "99": 0.0,
          "102": 0.0,
          "103": 0.0,
          "107": 0.0,
          "108": 0.0,
          "110": 0.0,
          "111": 0.0,
          "115": 0.0,
          "126": 0.0,
          "127": 0.0,
          "128": 0.0,
          "130": 0.0,
          "140": 0.016046762466430664,
          "155": 0.007993221282958984,
          "160": 0.023504018783569336,
          "141": 0.010007381439208984,
          "142": 0.013045549392700195,
          "145": 0.014010906219482422,
          "150": 0.005011558532714844,
          "151": 0.014016151428222656,
          "161": 0.018121957778930664,
          "187": 0.08832812309265137,
          "188": 0.12493777275085449,
          "190": 0.022030115127563477,
          "191": 0.12157416343688965,
          "192": 0.42410874366760254,
          "193": 0.46654820442199707,
          "195": 0.01302337646484375,
          "196": 0.1280989646911621,
          "198": 0.03099656105041504,
          "146": 0.002001523971557617,
          "147": 0.003003358840942383,
          "148": 0.0030031204223632812,
          "143": 0.0020020008087158203,
          "144": 0.003000974655151367,
          "77": 0.0,
          "25": 0.0,
          "26": 0.0,
          "27": 0.0,
          "28": 0.0,
          "78": 0.0,
          "79": 0.0,
          "80": 0.0,
          "81": 0.0,
          "82": 0.0,
          "85": 0.0,
          "88": 0.0,
          "89": 0.0,
          "91": 0.12211203575134277,
          "135": 0.0
        },
        "executionCount": {
          "1": 1,
          "3": 1,
          "7": 1,
          "17": 1,
          "24": 1,
          "32": 1,
          "74": 1,
          "95": 2,
          "97": 1,
          "118": 1,
          "133": 1,
          "138": 1,
          "185": 1,
          "201": 1,
          "9": 1,
          "11": 1,
          "13": 1,
          "34": 1,
          "36": 1,
          "39": 1,
          "40": 1,
          "42": 1,
          "44": 1,
          "64": 1,
          "66": 9,
          "67": 23,
          "68": 1,
          "70": 1,
          "121": 1,
          "124": 1,
          "99": 1,
          "102": 1,
          "103": 1,
          "107": 1,
          "108": 1,
          "110": 8,
          "111": 23,
          "115": 1,
          "126": 1,
          "127": 1,
          "128": 1,
          "130": 1,
          "140": 10000,
          "155": 10000,
          "160": 10000,
          "141": 10000,
          "142": 10000,
          "145": 10241,
          "150": 8571,
          "151": 8571,
          "161": 10000,
          "187": 50000,
          "188": 90000,
          "190": 10000,
          "191": 80000,
          "192": 280000,
          "193": 210000,
          "195": 10000,
          "196": 90000,
          "198": 10000,
          "146": 1670,
          "147": 1670,
          "148": 1670,
          "143": 1429,
          "144": 1429,
          "77": 1,
          "25": 2,
          "26": 30,
          "27": 28,
          "28": 2,
          "78": 1,
          "79": 1,
          "80": 1,
          "81": 1,
          "82": 1,
          "85": 1,
          "88": 1,
          "89": 1,
          "91": 1,
          "135": 1
        },
        "srcCode": [
          [
            "line",
            1,
            "from DFA import DFA"
          ],
          [
            "line",
            2,
            ""
          ],
          [
            "line",
            3,
            "import sqlite3"
          ],
          [
            "line",
            4,
            ""
          ],
          [
            "line",
            5,
            ""
          ],
          [
            "line",
            6,
            ""
          ],
          [
            "line",
            7,
            "def ensureValidity(dbConn):"
          ],
          [
            "line",
            8,
            "    "
          ],
          [
            "line",
            9,
            "    dbConn.cursor().execute('''"
          ],
          [
            "line",
            10,
            "        CREATE TABLE IF NOT EXISTS EnumerationProgress "
          ],
          [
            "line",
            11,
            "        (numberOfStates INTEGER, alphabetSize INTEGER, numberOfAcceptingStates INTEGER, acceptingStatesProgress TEXT, transitionsProgress TEXT, finished INTEGER)'''"
          ],
          [
            "line",
            12,
            "    )"
          ],
          [
            "line",
            13,
            "    dbConn.commit()"
          ],
          [
            "line",
            14,
            "    "
          ],
          [
            "line",
            15,
            "    "
          ],
          [
            "line",
            16,
            "    "
          ],
          [
            "line",
            17,
            "def clear(dbConn):"
          ],
          [
            "line",
            18,
            "    "
          ],
          [
            "line",
            19,
            "    dbConn.cursor().execute('''DROP TABLE IF EXISTS EnumerationProgress''')"
          ],
          [
            "line",
            20,
            "    dbConn.commit()"
          ],
          [
            "line",
            21,
            "    "
          ],
          [
            "line",
            22,
            "    "
          ],
          [
            "line",
            23,
            "    "
          ],
          [
            "line",
            24,
            "def __encodeListOfInts(l):"
          ],
          [
            "line",
            25,
            "    s = \"\""
          ],
          [
            "line",
            26,
            "    for n in l:"
          ],
          [
            "line",
            27,
            "        s += str(n) + \",\""
          ],
          [
            "line",
            28,
            "    return s[:-1]"
          ],
          [
            "line",
            29,
            "    "
          ],
          [
            "line",
            30,
            "    "
          ],
          [
            "line",
            31,
            "    "
          ],
          [
            "line",
            32,
            "def fetchEnumerationProgress(dbConn, numberOfStates, alphabetSize, numberOfAcceptingStates):"
          ],
          [
            "line",
            33,
            ""
          ],
          [
            "line",
            34,
            "    c = dbConn.cursor()"
          ],
          [
            "line",
            35,
            "    "
          ],
          [
            "line",
            36,
            "    c.execute('''"
          ],
          [
            "line",
            37,
            "        SELECT acceptingStatesProgress, transitionsProgress, finished "
          ],
          [
            "line",
            38,
            "        FROM EnumerationProgress "
          ],
          [
            "line",
            39,
            "        WHERE numberOfStates = ? AND alphabetSize = ? AND numberOfAcceptingStates = ?''', "
          ],
          [
            "line",
            40,
            "        (numberOfStates, alphabetSize, numberOfAcceptingStates)"
          ],
          [
            "line",
            41,
            "    )"
          ],
          [
            "line",
            42,
            "    result = c.fetchone()"
          ],
          [
            "line",
            43,
            "    "
          ],
          [
            "line",
            44,
            "    if result == None:"
          ],
          [
            "skip",
            19
          ],
          [
            "line",
            64,
            "        acceptingStatesProgress, transitionsProgress, finished = result"
          ],
          [
            "line",
            65,
            "        "
          ],
          [
            "line",
            66,
            "        acceptingStatesProgress = [int(i) for i in acceptingStatesProgress.split(\",\")]"
          ],
          [
            "line",
            67,
            "        transitionsProgress     = [int(i) for i in transitionsProgress.split(\",\")]"
          ],
          [
            "line",
            68,
            "        finished                = bool(finished)"
          ],
          [
            "line",
            69,
            "        "
          ],
          [
            "line",
            70,
            "        return EnumerationProgress.fromExisting(numberOfStates, alphabetSize, numberOfAcceptingStates, acceptingStatesProgress, transitionsProgress, finished)"
          ],
          [
            "line",
            71,
            "            "
          ],
          [
            "line",
            72,
            "            "
          ],
          [
            "line",
            73,
            "            "
          ],
          [
            "line",
            74,
            "def updateEnumerationProgress(dbConn, enumProg):"
          ],
          [
            "line",
            75,
            ""
          ],
          [
            "line",
            76,
            "    dbTuple = ("
          ],
          [
            "line",
            77,
            "        __encodeListOfInts(enumProg.acceptingStatesProgress),"
          ],
          [
            "line",
            78,
            "        __encodeListOfInts(enumProg.transitionsProgress),"
          ],
          [
            "line",
            79,
            "        int(enumProg.finished),"
          ],
          [
            "line",
            80,
            "        enumProg.numberOfStates,"
          ],
          [
            "line",
            81,
            "        enumProg.alphabetSize,"
          ],
          [
            "line",
            82,
            "        enumProg.numberOfAcceptingStates"
          ],
          [
            "line",
            83,
            "    )"
          ],
          [
            "line",
            84,
            "    "
          ],
          [
            "line",
            85,
            "    dbConn.cursor().execute('''"
          ],
          [
            "line",
            86,
            "        UPDATE EnumerationProgress "
          ],
          [
            "line",
            87,
            "        SET acceptingStatesProgress = ?, transitionsProgress = ?, finished = ? "
          ],
          [
            "line",
            88,
            "        WHERE numberOfStates = ? AND alphabetSize = ? AND numberOfAcceptingStates = ?''',"
          ],
          [
            "line",
            89,
            "        dbTuple"
          ],
          [
            "line",
            90,
            "    )"
          ],
          [
            "line",
            91,
            "    dbConn.commit()"
          ],
          [
            "line",
            92,
            "    "
          ],
          [
            "line",
            93,
            "    "
          ],
          [
            "line",
            94,
            "    "
          ],
          [
            "line",
            95,
            "class EnumerationProgress(object):"
          ],
          [
            "line",
            96,
            ""
          ],
          [
            "line",
            97,
            "    def __init__(self, numberOfStates, alphabetSize, numberOfAcceptingStates):"
          ],
          [
            "line",
            98,
            "    "
          ],
          [
            "line",
            99,
            "        if numberOfStates < 1:"
          ],
          [
            "line",
            100,
            "            raise Exception(\"Number of states must be greater than zero for a DFA.\")"
          ],
          [
            "line",
            101,
            "    "
          ],
          [
            "line",
            102,
            "        self.numberOfStates = numberOfStates"
          ],
          [
            "line",
            103,
            "        self.alphabetSize   = alphabetSize"
          ],
          [
            "line",
            104,
            "        "
          ],
          [
            "line",
            105,
            "        # ----"
          ],
          [
            "line",
            106,
            "        "
          ],
          [
            "line",
            107,
            "        self.numberOfTransitions     = numberOfStates * alphabetSize"
          ],
          [
            "line",
            108,
            "        self.numberOfAcceptingStates = numberOfAcceptingStates"
          ],
          [
            "line",
            109,
            "        "
          ],
          [
            "line",
            110,
            "        self.acceptingStatesProgress = [1] + [0 for i in range(self.numberOfStates-1)]"
          ],
          [
            "line",
            111,
            "        self.transitionsProgress     = [0 for i in range(self.numberOfTransitions)]"
          ],
          [
            "line",
            112,
            "        "
          ],
          [
            "line",
            113,
            "        # ----"
          ],
          [
            "line",
            114,
            "        "
          ],
          [
            "line",
            115,
            "        self.finished = False"
          ],
          [
            "line",
            116,
            "        "
          ],
          [
            "line",
            117,
            "        "
          ],
          [
            "line",
            118,
            "    @staticmethod"
          ],
          [
            "line",
            119,
            "    def fromExisting(numberOfStates, alphabetSize, numberOfAcceptingStates, acceptingStatesProgress, transitionsProgress, finished):"
          ],
          [
            "line",
            120,
            "    "
          ],
          [
            "line",
            121,
            "        if numberOfStates < 1:"
          ],
          [
            "line",
            122,
            "            raise Exception(\"Number of states must be greater than zero for a DFA.\")"
          ],
          [
            "line",
            123,
            "            "
          ],
          [
            "line",
            124,
            "        enumProg = EnumerationProgress(numberOfStates, alphabetSize, numberOfAcceptingStates)"
          ],
          [
            "line",
            125,
            "        "
          ],
          [
            "line",
            126,
            "        enumProg.acceptingStatesProgress = acceptingStatesProgress"
          ],
          [
            "line",
            127,
            "        enumProg.transitionsProgress     = transitionsProgress"
          ],
          [
            "line",
            128,
            "        enumProg.finished                = finished"
          ],
          [
            "line",
            129,
            "        "
          ],
          [
            "line",
            130,
            "        return enumProg"
          ],
          [
            "line",
            131,
            "        "
          ],
          [
            "line",
            132,
            "        "
          ],
          [
            "line",
            133,
            "    def __str__(self):"
          ],
          [
            "line",
            134,
            "    "
          ],
          [
            "line",
            135,
            "        return str((self.numberOfStates, self.alphabetSize, self.numberOfAcceptingStates, self.acceptingStatesProgress, self.transitionsProgress, self.finished))"
          ],
          [
            "line",
            136,
            "        "
          ],
          [
            "line",
            137,
            "        "
          ],
          [
            "line",
            138,
            "    def increment(self):"
          ],
          [
            "line",
            139,
            ""
          ],
          [
            "line",
            140,
            "        def addOneReverse(n, p):"
          ],
          [
            "line",
            141,
            "            i = 0"
          ],
          [
            "line",
            142,
            "            if n[i] == 0:"
          ],
          [
            "line",
            143,
            "                n[i] = 1"
          ],
          [
            "line",
            144,
            "                return n"
          ],
          [
            "line",
            145,
            "            while n[i] == p-1:"
          ],
          [
            "line",
            146,
            "                n[i] = 0"
          ],
          [
            "line",
            147,
            "                i += 1"
          ],
          [
            "line",
            148,
            "                if i == len(n):"
          ],
          [
            "line",
            149,
            "                    return None"
          ],
          [
            "line",
            150,
            "            n[i] += 1"
          ],
          [
            "line",
            151,
            "            return n"
          ],
          [
            "line",
            152,
            "        "
          ],
          [
            "line",
            153,
            "        # ----"
          ],
          [
            "line",
            154,
            "        "
          ],
          [
            "line",
            155,
            "        if self.finished:"
          ],
          [
            "line",
            156,
            "            return None"
          ],
          [
            "line",
            157,
            "        "
          ],
          [
            "line",
            158,
            "        # further iterate through transitions, if possible"
          ],
          [
            "line",
            159,
            "        "
          ],
          [
            "line",
            160,
            "        if addOneReverse(self.transitionsProgress, self.numberOfStates) != None:"
          ],
          [
            "line",
            161,
            "            return self"
          ],
          [
            "skip",
            23
          ],
          [
            "line",
            185,
            "    def dfa(self):"
          ],
          [
            "line",
            186,
            "    "
          ],
          [
            "line",
            187,
            "        A = [ chr(i) for i in range(ord('a'), ord('a')+self.alphabetSize) ]"
          ],
          [
            "line",
            188,
            "        Q = [ i for i in range(self.numberOfStates) ]"
          ],
          [
            "line",
            189,
            "        "
          ],
          [
            "line",
            190,
            "        d = []"
          ],
          [
            "line",
            191,
            "        for i in range(self.numberOfStates):"
          ],
          [
            "line",
            192,
            "            for j in range(self.alphabetSize):"
          ],
          [
            "line",
            193,
            "                d.append(((Q[i],A[j]),self.transitionsProgress[i * self.alphabetSize + j]))"
          ],
          [
            "line",
            194,
            "        "
          ],
          [
            "line",
            195,
            "        s = 0"
          ],
          [
            "line",
            196,
            "        F = [ q for q in Q if self.acceptingStatesProgress[q] ]"
          ],
          [
            "line",
            197,
            "    "
          ],
          [
            "line",
            198,
            "        return DFA(A, Q, d, s, F)"
          ],
          [
            "line",
            199,
            "    "
          ],
          [
            "line",
            200,
            ""
          ],
          [
            "line",
            201,
            "if __name__ == \"__main__\":"
          ],
          [
            "skip",
            22
          ]
        ],
        "runTime": 1.6765265464782715
      }
    ]
  },
  "version": "0.37.6"
}